%
% File naaclhlt2009.tex
%
% Contact: nasmith@cs.cmu.edu

\documentclass[11pt]{article}
\usepackage{naaclhlt2009}
\usepackage{times}
\usepackage{latexsym}
\usepackage{epsfig}
\setlength\titlebox{6.5cm}    % Expanding the titlebox

\newcommand{\abs}[1]{\left\vert#1\right\vert}
\newcommand{\set}[1]{\left\{#1\right\}}
\newcommand{\citet}[1]{\cite{#1}}
\newcommand{\citep}[1]{\cite{#1}}
\newcommand{\ut}{\textit}
\newcommand{\lit}[1]{\footnote{Lit. translation: #1}}

\newcommand{\efgr}[2]{
  \begin{figure}[htbp]
    \makebox[8.5cm]{\framebox[5cm]{\rule{0pt}{5cm}}}
    \caption{#2}
    \label{#1}
  \end{figure}
}

\newcommand{\fgrparam}[4]{
  \begin{figure}[htbp]
    \begin{center}
      \leavevmode
      \includegraphics[#1]{#2}
    \end{center}
    \caption{#4}
    \label{#3}
  \end{figure}
}

\title{Error Corrective Learning for Semantic parsing}

\author{F. Jur\v{c}\'{i}\v{c}ek, F. Mairesse, M. Ga\v{s}i\'{c}, S. Keizer, B. Thomson, K. Yu, and S. Young \\
Cambridge University Engineering Department, Trumpington Street, Cambridge, CB2 1PZ, UK \\
{\tt \{fj228, farm2, mg436, sk561, brmt2, ky219, sjy\}@eng.cam.ac.uk}
}

\date{}

\begin{document}
\maketitle
\begin{abstract}a
  In this paper, we present a semantic parser which transforms initial naive semantic hypothesis into correct semantics by using a ordered set of rules. These rules are learned automatically from the training corpus with no linguistic knowledge.
\end{abstract}

\section{Introduction}

\textbf{Check how you cal STEP. ECL parser?}

Semantic parsing is important part of a spoken dialogue system \cite{williams07,thomson08}. The goal of a semantic parsing is to construct formal meaning representation (semantics) which is directly executable by a dialogue manager. Such semantics is usually defined by a grammar, e.g. LR grammar for GeoQuery domain \cite{wong06} \textbf{better paper???}, which is designed by a domain expert and easy to interpret by a dialogue manager or question answering system.

Semantic parsing can be understood as machine translation from a natural language to a formal language. First, we do not not have formal grammar for natural language is ungrammatical, include hesitations, and very often only fragments of complete sentences, e.g. ``Boston to Miami tomorrow''. 

\section{Related work}

There has been a large amount of work done on learning to map sentences 
into their semantics. Many different techniques have been considered including machine translation \cite{wong06} 

techniques using inductive logic programing \cite{lappoon01}

suport vector machines \cite{mairesse09} and tree kernels \cite{kate08}

markov logic networks \cite{meza08, meza08b}

automatic induction of combinatory categorical grammar \cite{zettlemoyer07}

\cite{he06} developed a parser for the ATIS domain also takes utterances paired with semantics as input. Their parser approximate a pushdown automaton with semantic concepts as non-terminal symbols.  

transformation techniques \cite{kate05}

Transformation-based Error-driven Learning - Some Advances in Transformation-Based Part of Speech Tagging - Brill (1994)

\cite{kate08} % dep-kernel


R. J. Kate, Y. W. Wong, and R. J. Mooney. 2005. Learning
to transform natural to formal languages. In Proc.
of AAAI-05, pages 1062?1068, Pittsburgh, PA, July.  

L. R. Tang and R. J. Mooney. 2001. Using multiple
clause constructors in inductive logic programming for
semantic parsing. In Proc. of ECML-01, pages 466?
477, Freiburg, Germany.

Subsection~\ref{ssec:first}).

\section{Transformation-based parser}
This section describes the transformation-based parser. First of all, we describe rule templates used to generate rules for the rule inference process. Secondly, we describe the learning process. Finally, we describe parsing algorithm.

\subsection{Rule templates}
The learning algorithm uses rule templates to instantiate rules which are subsequently tested by the learning algorithm. Each rule template is composed of a trigger and transformation. \textbf{A trigger controls whether a transformation of hypothesis can be performed}. Each trigger question either input utterance or output semantics. As a results each trigger contains one or several condition:
\begin{itemize}
  \item The utterance contains n-gram N?
  \item The utterance contains skipping\footnote{A skipping bigram is bigram which skips one or more words between words in the bigram} bigram B?
  \item The semantics dialogue act equals to D?
  \item The semantics contains slot S?
\end{itemize}
If a trigger contains more than one condition, then all conditions must be satisfied. \textbf{Get rid of the questions.}

A transformation performs one of these operation:
\begin{itemize}
  \item substitute a dialogue act type
  \item add a slot
  \item delete a slot
  \item substitute a slot
\end{itemize}
As substitution can either substitute a whole slot, an equal sign in the slot, or a slot name.

\subsection{Example of Parsing}
The semantic parser transforms initial naive semantic hypothesis into correct semantics by using a ordered set of rules. The parsing is composed of \textbf{three} steps: 
\begin{enumerate}
  \item initial semantics is assigned as hypothesis
  \item sequentially apply all rules\footnote{Input utterance is not modified by rules. As a result, words from the utterance can be trigger several different transformations.}
  \item output hypothesis semantics
\end{enumerate}


\subsection{Learning}

Rules are learned sequentially:
\begin{enumerate}
  \item initial semantics is assigned as hypothesis to each input utterance
  \item repeat as long as the number of errors\footnote{Number of errors include number of dialogue act substitutions, number of slot insertions, number of slot deletions, number of slot substitutions.} on training set decreases
  \begin{enumerate}
    \item generate all possible rules which correct at least one error in the training set
    \item measure number of corrected errors for each rule
    \item select the best rule
    \item apply the selected rule
  \end{enumerate}
  \item prune rules
\end{enumerate}

The make the parser more robust, we increase robustness of the parser by the following steps. 

First, the number of plausible slot values for each slot is usually very high. As a result, we replace all lexical realizations from the database, available to \textbf{a dialogue manager}, by its slot name in the input utterance. For example, in utterance ``find all the flights from cincinnati to the new york city'' the lexical realization are replaced as follows: ``please find all the flights from city-0 to the city-1''. Similarly, we replace slot values in the semantics.

Secondly, to limit overfitting the training data, we prune the rules which are learned at the end of the learning. We sequentially apply each rule on the development set. And we chose the number of rules for which the parser gets the highest score on the development data.



First of all, very naive rules are learn are for example 
Classifier learns to correct its errors
STEC can delete an incorrect slot
STEC can substitute
A slot name of an incorrect slot
An equal sign of an incorrect slot

\textbf{To speed up training, we select not only one best rule but also rules which correct at minimum 80\% errors of the best rule. }



\section{Evaluation}

In this section, we evaluate our parser on two distinct corpora, and compare our results with the state-of-the-art techniques and handcrafted rule-based parser. 

\subsection{Datasets}

Our first dataset consists of tourist information dialogues in a fictitious
town (TownInfo). The dialogues were collected through user
trials in which users searched for information about a specific venue
by interacting with a dialogue system in a noisy background. These
dialogues were previously used for training dialogue management
strategies \cite{williams07,thomson08}. The semantic representation of the user utterance consists of a root dialogue act type and a set of slots which are either
unbound or associated with a child value. For example, ``What is
the address of Char Sue'' is represented as request(address='Char Sue'), and ``I would like a Chinese restaurant?'' as inform(food='Chinese',type='restaurant'). The TownInfo training, development, and test sets respectively contain
8396, 986 and 1023 transcribed utterances.  The data includes the transcription of the top hypothesis of the ATK speech recogniser,
which allows us to evaluate the robustness of our models to recognition
errors (word error rate = 34.4\%). 

In order to compare our results with previous work \cite{he06,zettlemoyer07},
we apply our method to the Air Travel Information System dataset
(ATIS) \cite{atis94}. This dataset consists of user requests for flight information, for example ``Find flight from San Diego to Phoenix on Monday is rerepresented as flight(from.city="San Diego",to.city="Phoenix",departure.day="Monday"). We use 5012 utterances for training, and the DEC94 dataset as development data. As in previous work, we test our method on the 448 utterances of the NOV93 dataset, and the evaluation criteria is the F-measure of the number of reference slot/value pairs that appear in the output semantic (e.g., from.city = New York). He \& Young detail the test data extraction process in \cite{he05}.

For both corpora are available databases with lexical entries for slot values e.g. city names, airport names, etc. 

\subsection{Improving disambiguation of long-range dependecies}

\fgrparam{width=5cm}{./fig/dep-tree.pdf}{fig:dep:tree}{Dependency tree of the sentence ''Show the cheapest flights from New York to San Jose arriving before 7pm on Monday`` generated by the RASP parser \cite{rasp06}.}

Besides simple n-grams and skipping bigrams more complex lexical features can be used. \cite{kate08} used gold standard word dependencies to capture long-range relationship between words. At its simplest, dependencies tree is one of the most concise ways to describe language syntax. Essentially, each word is viewed as the dependent of one other word, with the exception of a single word which that is the root of the sentence. Kate showed that word dependencies significantly improve semantic parsing because long-range dependencies from an utterance tend to be local in a dependency tree. For example, the words ''arriving`` and ''Monday`` are neighbors in the dependency tree but they are four words apart in the sentence (see Figure \ref{fig:dep:tree}).

Instead of using gold standard word dependencies, we used dependencies provided by RASP dependency parser \cite{rasp06}. First of all, we had to add capitalization and punctuation into the ATIS data to be able to use the RASP parser. The RASP parser without proper capitalization fails to tag ''new`` and ''york`` as NP and instead of this it tags ''new`` as ''JJ`` and 'york' as NP and the dependencies generated by the parser are unsatisfactory. Secondly, we generated new n-gram features from dependency trees. Even though the dependencies generated the RASP parser are no absolutely accurate, the new features increase performance in F-measure on ATIS data. 

Secondly, we generated long-range features by using POS tags\footnote{We used POS tags provided by the RASP parser; however, any POS tagger can be used instead.} 
Our motivation was work of \cite{meza08a,meza08b} who handcrafted features using words ''arrive``, ''arriving``, ''leave``, and ''leaving``. These handcrafted features disambiguate large number of semantic parsing errors in ATIS data because large portion or errors is caused by confusions between concepts ''arrival.time`` and ''departure.time``, ''arrival.day`` and ''departure.day``, etc. To generalize this approach, we want to automatically find features which could disambiguate words like ''Monday``, ''7pm``, and ''Boston``. As a result, we generate a new type of bigrams for a word and the nearest verb, preposition, etc. We use all parts-of-speech provided by RASP and the learning algorithm chose the most discriminative features. Among those learned are not only the words used by Meza-Rui but also words like ''stop``, ''reach``, ''buy`` and prepositions like ''at``, ''from``, ''to``, etc.

\textbf{Mention why I do not use tree similarity measure as Kate.}

\subsection{Results}

We also compare our models with the handcrafted Phoenix grammar \cite{ward91} used in the trials \cite{williams07,thomson08}. The Phoenix parser implements a partial matching algorithm that was designed for robust spoken language understanding.



\begin{table}
\begin{center}
\begin{tabular}{|l|ccc|}
\hline \makebox[2.99cm]{\bf Parser} & \makebox[1.1cm]{\bf Prec} & \makebox[1.1cm]{\bf Rec} & \bf F \\ \hline 
\multicolumn{4}{l}{\textbf{TownInfo dataset with transcribed utterances:}} \\
\hline
ECL      & 96.05 & 94.66 & 95.35 \\
STC      & 97.39 & 94.05 & \textbf{95.69} \\
Phoenix  & 96.33 & 94.22 & 95.26 \\
\hline
\multicolumn{4}{l}{\textbf{TownInfo dataset with ASR output:}} \\
\hline
ECL      & 92.72 & 83.42 & 87.82 \\
STC      & 94.03 & 83.73 & \textbf{88.58} \\
Phoenix & 90.28 & 79.49 & 84.54 \\
\hline
\multicolumn{4}{l}{\textbf{ATIS dataset with transcribed utterances:}} \\
\hline
ECL   & 96.37 & 95.12 & 95.74 \\
STC   & 96.73 & 92.37 & 94.50 \\
HVS   & - & - & 90.3  \\
MLN   & - & - & 92.99 \\
PCCG  & 95.11 & 96.71 & \textbf{95.9} \\
\hline
\end{tabular}
\end{center}
  \caption{\label{font-table} Slot/value precision (Prec), recall (Rec) and F-measure (F) for the ATIS and TownInfo datasets. ECL parser is compared with Phoenix parser and STC clasifier \cite{mairesse09} on the TownInfo dataset and compared with HVS parser \cite{he06}, MLN parser \cite{meza08b}, STC classifier, and PCCG parser \cite{zettlemoyer07} on the ATIS dataset}
\end{table}

\section{Discussion}

\efgr{fig:learning:curve}{The learning curve shows the relation between number of learned rules and the F-measure for both TI and ATIS corpora.}

The number of learned rules is very small. As is shown in the figure \ref{fig:learning:curve}, learning curves for both training data and development data are very steep. Although our current strategy for choosing the final number of rules for decoding is to keep only the rules for which we obtain highest F-measure on the development data, we could use much less rules without scarifying accuracy. For example, we accepted 0.1\% lower F-measure on the development data than we would need only YYY rules in comparison with XXX rules if select the number of rules based in the highest F-measure. In contrast, the initial lexicon the CCG parser \cite{zettlemoyer07} contains about 180 complex entries for general English words or phrases and yet additional lexical entries must be learned. \textbf{explain better}

Also, the number of rules per semantic concept (dialogue act or slot name) is very low. In TI data, we have XXX different dialogue acts and XXX slot and the average number of rules per semantic concept is XXX. In case of ATIS data, we have XXX dialogue acts and XXX slots and the average number of rules per semantic concept is XXX.

Lexical realizations of a slot can overlap with lexical realization of neighbouring slots. It is shows to be important pattern, for example in the trigram (city-0,and,city-1) is very common for sentence including ''between city-0 and city-1``. The lexical realizations city-0, city-1 respectively would be classified as from.city, and city-1 just because we know the  


We found that the dialogue act type recognition accuracy of the STEP parser is lower than STC's; as a result, we tried to use SVM as STC does to classify dialogue act types. We believe that STC is better in dialogue act type recognition better because SVN classifier use all features at one time. Makes decision in one step using all the features rather than making several decisions by several rules as STEP does it.

We hoped for an increase of F-measure as result of increased dialogue act type accuracy. However, we did not get any increase in F-measure.
 
\section*{Acknowledgments}

Do not number the acknowledgment section.


\begin{thebibliography}{}

\bibitem[\protect\citename{Williams and Young}2007]{williams07}
J. Williams and S. Young, 
\newblock 2007.
\newblock {\em Partially observable markov decision
processes for spoken dialog systems}.
\newblock Computer Speech and Language, vol. 21, no. 2, pp. 231-422.

\bibitem[\protect\citename{Thomson et al}2008]{thomson08}
B. Thomson, M. Gasic, S. Keizer, F. Mairesse, J. Schatzmann,
K. Yu, and S. Young.
\newblock 2008.
\newblock {\em User study of the Bayesian update of dialogue state approach to dialogue management}.
\newblock Proceedings of Interspeech.

\bibitem[\protect\citename{Ward}1991]{ward91}
W. H. Ward.
\newblock 1991.
\newblock {\em The Phoenix system: Understanding spontaneous
speech}.
\newblock Proceedings of ICASSP.

\bibitem[\protect\citename{Zettlemoyer and Collins}2007]{zettlemoyer07}
L.S. Zettlemoyer and M. Collins.
\newblock 2005.
\newblock {\em Online learning of relaxed CCG grammars for parsing to logical form}.
\newblock Proceedings of EMNLP-CoNLL.

\bibitem[\protect\citename{Dahl et al}1994]{atis94}
D.A. Dahl, M. Bates, M. Brown, W. Fisher, K. Hunicke-Smith,
D. Pallett, C. Pao, A. Rudnicky, and E. Shriberg.
\newblock 1994.
\newblock {\em Expanding the scope of the ATIS task: The ATIS-3 corpus}.
\newblock Proceedings of the ARPA HLT Workshop.

\bibitem[\protect\citename{He and Young}2005]{he05}
Y. He and S. Young.
\newblock 2005.
\newblock {\em Semantic processing using the
hidden vector state model}.
\newblock Computer Speech \& Language,vol. 19, no. 1, pp. 85-106.

\bibitem[\protect\citename{He and Young}2006]{he06}
Y.He and S. Young.
\newblock 2006.
\newblock {\em Spoken language understanding using the hidden vector state model}.
\newblock Computer Speech \& Language, vol. 19, no. 1, pp. 85-106.


\bibitem[\protect\citename{Wong and Mooney}2006]{wong06}
Y.W. Wong and R.J. Mooney.
\newblock 2006.
\newblock {\em Learning for Semantic Parsing with Statistical Machine Translation}.
\newblock Proceedings of HLT/NAACL.

\bibitem[\protect\citename{Kate}2005]{kate05}
R.J. Kate, Y.W. Wong and R.J. Mooney.
\newblock 2008.
\newblock {\em Learning to Transform Natural to Formal Languages}.
\newblock Proceedings of AAAI.

\bibitem[\protect\citename{Kate}2005]{kate05}
R.J. Kate.
\newblock 2008.
\newblock {\em A Dependency-based Word Subsequence Kernel}.
\newblock Proceedings of EMNLP.

\bibitem[\protect\citename{Briscoe et al}2006]{rasp06}
E. Briscoe, J. Carroll and R. Watson.
\newblock 2006.
\newblock {\em The Second Release of the RASP System}.
\newblock Proceedings of COLING/ACL.

\bibitem[\protect\citename{Meza et al}2008a]{meza08b}
I. V. Meza-Ruiz, S. Riedel and O. Lemon.
\newblock 2008.
\newblock {\em Accurate statistical spoken language understanding from limited development resources}.
\newblock Proceedings of ICASSP.

\bibitem[\protect\citename{Mairesse et al}2009]{mairesse09}
F. Mairesse, M. Gasic, F. Jurcicek, S. Keizer, B. Thomson, K. Yu, and S. Young.
\newblock 2009.
\newblock {\em Spoken Language Understanding from Unaligned Data using Discriminative Classification Models}.
\newblock Proceedings of ICASSP.

\bibitem[\protect\citename{Meza et al}2008b]{meza08b}
I. V. Meza-Ruiz, S. Riedel and O. Lemon.
\newblock 2008.
\newblock {\em Spoken Language Understanding in dialogue systems, using a 2-layer Markov Logic Network: improving semantic accuracy}.
\newblock Proceedings of Londial.

\bibitem[\protect\citename{Tang  et al}2001]{tang01}
L. R. Tang and R. J. Mooney 
\newblock 2001.
\newblock {\em Using Multiple Clause Constructors in Inductive Logic Programming for Semantic Parsing}.
\newblock Proceedings of ECML.

\end{thebibliography}

\end{document}
